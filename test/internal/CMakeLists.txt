set(examples internal_test)

function(gcc_base example)
    add_executable(${example} ${example}.cpp ${TEST_SRC})
    target_link_libraries(${example} ${TEST_LIBS} tailorfs)
endfunction()

foreach (example ${examples})
    gcc_base(${example})
endforeach ()
function(create_test)
    if (${machine} STREQUAL "local" AND ${ranks_per_node} STREQUAL "1")
        set(mpi_exec)
    elseif (${machine} STREQUAL "local")
        set(mpi_exec mpirun -n ${ranks_per_node})
    elseif (${machine} STREQUAL "lassen")
        set(mpi_exec jsrun -r 1 -a ${ranks_per_node} -c ${ranks_per_node} -d packed)
    endif ()
    set(TEST_ARGS --num_of_ops ${num_op} ${test_case})
    set(test_name test_internal_${machine}_${test_case}_${NUM_NODES}_${ranks_per_node}_${num_op})
    add_test(${test_name} ${mpi_exec} ${CMAKE_BINARY_DIR}/bin/internal_test ${TEST_ARGS})
    set_property(TEST ${test_name} APPEND PROPERTY ENVIRONMENT pfs=$ENV{pfs})
    set_property(TEST ${test_name} APPEND PROPERTY ENVIRONMENT BBPATH=$ENV{BBPATH})
    set_property(TEST ${test_name} APPEND PROPERTY ENVIRONMENT TAILORFS_INIT=0)
    set_property(TEST ${test_name} APPEND PROPERTY ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:${CMAKE_SOURCE_DIR}/dependency/.spack-env/view/lib)
endfunction()
if (NOT DEFINED ENV{LSB_MAX_NUM_PROCESSORS})
    message(STATUS "Environment variable LSB_MAX_NUM_PROCESSORS not defined. Default to 41.")
    set(LSB_MAX_NUM_PROCESSORS 41)
else ()
    set(LSB_MAX_NUM_PROCESSORS $ENV{LSB_MAX_NUM_PROCESSORS})
endif ()

set(MAX_CPUS ${LSB_MAX_NUM_PROCESSORS})
math(EXPR NUM_NODES "(${MAX_CPUS} - 1 ) / 40")
message(STATUS "Number of nodes: ${NUM_NODES}")
set(ranks_per_nodes_local 1 2)
set(ranks_per_nodes_lassen 1 2 32)
set(machines "local" "lassen")
set(num_ops 1000 10000 100000 1000000)
set(test_cases "anatomy")
foreach (machine ${machines})
    if (${machine} STREQUAL "local")
        set(ranks_per_nodes ${ranks_per_nodes_local})
    elseif (${machine} STREQUAL "lassen")
        set(ranks_per_nodes ${ranks_per_nodes_lassen})
    endif ()
    foreach (ranks_per_node ${ranks_per_nodes})
        foreach(test_case ${test_cases})
            foreach (num_op ${num_ops})
                create_test()
            endforeach()
        endforeach()
    endforeach()
endforeach()