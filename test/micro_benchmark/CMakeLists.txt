set(examples io_tests)

function(gcc_base example)
    add_executable(${example} ${example}.cpp ${TEST_SRC})
    target_link_libraries(${example} ${TEST_LIBS})
endfunction()

foreach (example ${examples})
    gcc_base(${example})
endforeach ()

if (NOT DEFINED ENV{LSB_MAX_NUM_PROCESSORS})
    message(STATUS "Environment variable LSB_MAX_NUM_PROCESSORS not defined. Default to 41.")
    set(LSB_MAX_NUM_PROCESSORS 41)
else ()
    set(LSB_MAX_NUM_PROCESSORS $ENV{LSB_MAX_NUM_PROCESSORS})
endif ()


set(MAX_CPUS ${LSB_MAX_NUM_PROCESSORS})
math(EXPR NUM_NODES "(${MAX_CPUS} - 1 ) / 40")
message(STATUS "Number of nodes: ${NUM_NODES}")
set(ranks_per_nodes_local 1 2)
set(ranks_per_nodes_lassen 1 2 32)
set(machines "local" "lassen")
set(rqs_kb 4 128 1024)
set(iters 1024)
set(num_apps 1)
set(file_sharings "fpp" "shared")
set(access_patterns "seq" "random")
set(ops "wo" "ro" "raw" "update" "worm")
set(process_groupings "all" "split" "alt")
set(count 0)
function(create_test)
    #[[message(STATUS "machine: " ${machine} " ranks_per_node:" ${ranks_per_node}
            " num_app:" ${num_app} " rq_kb:" ${rq_kb}
            " iter:" ${iter} " io_size_per_app_mb:" ${io_size_per_app_mb}
            " file_sharing:" ${file_sharing} " access_pattern:" ${access_pattern}
            " num_process_per_app:" ${num_process_per_app} " num_files_per_app:" ${num_files_per_app}
            " fpp_percentage:" ${fpp_percentage} " sequential_percentage:" ${sequential_percentage}
            " wo_file_ptg:" ${wo_file_ptg} " ro_file_ptg:" ${ro_file_ptg}
            " raw_file_ptg:" ${raw_file_ptg} " update_file_ptg:" ${update_file_ptg}
            " worm_file_ptg:" ${worm_file_ptg} " all_app_ptg:" ${all_app_ptg}
            " split_app_ptg:" ${split_app_ptg} " alt_app_ptg:" ${alt_app_ptg})]]

    math(EXPR count "${count} + 1")
    set(count ${count} PARENT_SCOPE)
    #message(STATUS ${count})
    set(config_file_suffix ${NUM_NODES}_${ranks_per_node}_${num_app}_${rq_kb}_${iter}_${file_sharing}_${access_pattern}_${op}_${process_grouping})
    set(config_file ${CMAKE_CURRENT_SOURCE_DIR}/json_files/${machine}/mimir_config_${config_file_suffix}.json)

    if (${machine} STREQUAL "local")
        set(mpi_exec mpirun -n ${ranks_per_node})
    elseif (${machine} STREQUAL "lassen")
        set(mpi_exec jsrun -r 1 -a ${ranks_per_node} -c ${ranks_per_node} -d packed)
    endif ()
    set(TEST_ARGS
            --request_size ${rq_bytes}
            --iteration ${iter}
            --ranks_per_node ${ranks_per_node}
            --access_pattern ${access_pattern_index}
            --file_sharing ${file_sharing_index}
            --process_grouping ${process_grouping_index}
            --reporter compact
            ${test_filter_str})
    set(test_name test_mb_${machine}_${config_file_suffix})
    add_test(${test_name} ${mpi_exec} ${CMAKE_CURRENT_BINARY_DIR}/io_tests ${TEST_ARGS})
    set_property(TEST ${test_name} APPEND PROPERTY ENVIRONMENT pfs=$ENV{pfs})
    set_property(TEST ${test_name} APPEND PROPERTY ENVIRONMENT PFS_PATH=$ENV{pfs})
    set_property(TEST ${test_name} APPEND PROPERTY ENVIRONMENT BBPATH=$ENV{BBPATH})
    set_property(TEST ${test_name} APPEND PROPERTY ENVIRONMENT MIMIR_CONFIG_PATH=${config_file})

endfunction()
foreach (machine ${machines})
    if (${machine} STREQUAL "local")
        set(ranks_per_nodes ${ranks_per_nodes_local})
    elseif (${machine} STREQUAL "lassen")
        set(ranks_per_nodes ${ranks_per_nodes_lassen})
    endif ()
    foreach (ranks_per_node ${ranks_per_nodes})
        foreach (num_app ${num_apps})
            foreach (rq_kb ${rqs_kb})
                math(EXPR rq_bytes "${rq_kb} * 1024")
                foreach (iter ${iters})
                    foreach (file_sharing ${file_sharings})
                        if (file_sharing STREQUAL "fpp")
                            set(file_sharing_index 0)
                        elseif (file_sharing STREQUAL "shared")
                            set(file_sharing_index 1)
                        endif ()
                        foreach (access_pattern ${access_patterns})
                            if (access_pattern STREQUAL "seq")
                                set(access_pattern_index 0)
                            elseif (access_pattern STREQUAL "random")
                                set(access_pattern_index 1)
                            endif ()
                            foreach (op ${ops})
                                if (op STREQUAL "wo")
                                    set(test_filter_str "Write-Only")
                                elseif (op STREQUAL "ro")
                                    set(test_filter_str "Read-Only")
                                elseif (op STREQUAL "raw")
                                    set(test_filter_str "Read-After-Write")
                                elseif (op STREQUAL "update")
                                    set(test_filter_str "Update")
                                elseif (op STREQUAL "worm")
                                    set(test_filter_str "WORM")
                                endif ()
                                if (access_pattern STREQUAL "seq" AND op STREQUAL "wo")
                                    set(process_grouping "all")
                                    set(process_grouping_index 0)
                                    create_test()
                                endif ()
                                if (op STREQUAL "update" OR op STREQUAL "ro")
                                    set(process_grouping "all")
                                    set(process_grouping_index 0)
                                    create_test()
                                elseif (op STREQUAL "raw" OR op STREQUAL "worm")
                                    foreach (process_grouping ${process_groupings})
                                        if (process_grouping STREQUAL "all")
                                            set(process_grouping_index 0)
                                        elseif (process_grouping STREQUAL "split")
                                            set(process_grouping_index 1)
                                        elseif (process_grouping STREQUAL "alt")
                                            set(process_grouping_index 1)
                                        endif ()
                                        if (ranks_per_node GREATER 1 OR process_grouping STREQUAL "all")
                                            create_test()
                                        endif ()
                                    endforeach ()
                                endif ()
                            endforeach ()
                        endforeach ()
                    endforeach ()
                endforeach ()
            endforeach ()
        endforeach ()
    endforeach ()
endforeach ()